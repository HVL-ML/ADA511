[
  {
    "objectID": "truth_inference.html#a-trivial-inference",
    "href": "truth_inference.html#a-trivial-inference",
    "title": "6  Truth inference",
    "section": "6.1 A trivial inference",
    "text": "6.1 A trivial inference\nConsider again the assembly-line scenario of § 1, and suppose that an inspector has the following information about an electric component:\n\nThis electric component had an early failure (within a year of use). If an electric component fails early, then at production it didn’t pass either the heating test or the shock test. This component passed the shock test.\n\nThe inspector wants to assess whether the component did not pass the heating test.\nFrom these data and information given, the conclusion is that the component for sure did not pass the heating test. This conclusion is certain, and also trivial. But how did we obtain it? Which rules did we follow to arrive at it from the given data?\nFormal logic, with its deduction systems, is the huge field that formalizes and makes rigorous the rules that a rational person or an artificial intelligence should use in drawing sure inferences like the one above. We’ll now get a glimpse of it, as a trampoline for jumping towards more general and uncertain inferences."
  },
  {
    "objectID": "truth_inference.html#analysis-and-representation-of-the-problem",
    "href": "truth_inference.html#analysis-and-representation-of-the-problem",
    "title": "6  Truth inference",
    "section": "6.2 Analysis and representation of the problem",
    "text": "6.2 Analysis and representation of the problem\nFirst let’s analyse our simple problem and represent it with more compact symbols.\nWe can introduce the following atomic sentences and symbols: \\[\n\\begin{aligned}\n\\mathsfit{h}&\\coloneqq \\textsf{\\small`The component passed the heating test'}\n\\\\\n\\mathsfit{s}&\\coloneqq \\textsf{\\small`The component passed the shock test'}\n\\\\\n\\mathsfit{f}&\\coloneqq \\textsf{\\small`The component had an early failure'}\n\\\\\n\\mathsfit{I}&\\coloneqq \\textsf{\\small (all other implicit background information)}\n\\end{aligned}\n\\]\nThe inference that the inspector wants to draw can be compactly written:\n\n\\[\n\\lnot\\mathsfit{h}\\nonscript\\:\\vert\\nonscript\\:\\mathopen{} \\mathsfit{s}\\land \\mathsfit{f}\\land \\mathsfit{I}\n\\]"
  },
  {
    "objectID": "truth_inference.html#truth-inference-rules",
    "href": "truth_inference.html#truth-inference-rules",
    "title": "6  Truth inference",
    "section": "6.3 Truth-inference rules",
    "text": "6.3 Truth-inference rules\nFormal logic gives us sets of rules for correctly drawing sure inferences, that is, inferences where the truth or falsity of the proposal can be exactly determined – when such inferences are possible. These rules can be formulated in different ways, leading to a wide variety of deduction systems. The picture here on the margin, for instance, shows how a proof of how our inference would look like, using the so-called sequent calculus.\n\n\n\n\n\nThe bottom formula is our conclusion. Each line denotes the application of an inference rule. The two formulae with no line above are our initial, known inference, and a tautology.\n\n\n\n\nOne important point is that deduction systems don’t lead to inferences out of nothing: in order to draw an inference, we must always start from some other inferences that are already known. This is one of the central points of logic, which you may have already heard about. It is sometimes stated in terms of axioms and theorems: in order to prove some theorem, we must always start from some axioms.11 There actually are “inferences” that can be drawn without requiring other ones; but they are all trivial tautologies, such as the conclusion “this component failed early, or it didn’t”. They are of little use in a real problem; but are important nevertheless, because they reflect the core of the inference rules.\n\n\nWe can compactly encode all inference rules in the following way. First, represent true by the number 1, and false by 0. Second, symbolically write that conclusion \\(C\\) is true, given assumptions \\(A\\), as follows: \\[\n\\mathrm{T}(C \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} A) = 1 \\ .\n\\] or with 0 if it’s false.\nWhat are the data available to the inspector? One is that the component failed, \\(\\mathsfit{f}\\); another is that the component passed the shock test, \\(\\mathsfit{s}\\). We already included both in the conditional of the inference above. The inspector also has another piece of information, which consists in a known inference: “if a component fails early, then it didn’t pass either the heating test or the shock test”. We write the fact that this inference is known as follows: \\[\n\\mathrm{T}(\\lnot\\mathsfit{h}\\lor \\lnot\\mathsfit{s}\\nonscript\\:\\vert\\nonscript\\:\\mathopen{} \\mathsfit{f}\\land \\mathsfit{I}) = 1\n\\]\n\nThe component can either come from the production line in Oslo, or from the one in Rome.\nIf the component is defective, it cannot come from Oslo.\nThe component is found to be defective.\n\nThe question is: from which production line does the component come from?\nThe answer is obvious: from the Rome line. But how could we draw this obvious and sure inference? Which rules did we follow? Did we make any hidden assumptions, or use information that wasn’t explicitly mentioned?\nLogic is the huge field that formalizes and makes rigorous the rules that a rational person or an artificial intelligence should use in drawing sure inferences. We’ll get a glimpse of it here, as a trampoline for jumping towards the more general inferences that we need in data-driven engineering problems.\n\nAnalysis of the problem\nLet’s write down the basic sentences that constitute our data and the inferences we want to draw. We identify three basic sentences, which we can represent by these symbols:\n\n\\(o \\coloneqq \\textsf{\\small`The component comes from the Oslo line'}\\)\n\\(r \\coloneqq \\textsf{\\small`The component comes from the Rome line'}\\)\n\\(d \\coloneqq \\textsf{\\small`The component is defective'}\\)\n\nObviously the inspector possesses even more information which is implicitly understood. It’s clear, for instance, that the component cannot come from both Oslo and Rome. Let’s denote this information with\n\n\\(I \\coloneqq{}\\)(a long collection of sentences explaining all other implicitly understood information).\n\n\nWith the sentences above we can express more complex details and hypotheses appearing in the inspector’s problem, in particular:\n\n\\(o \\lor r = \\textsf{\\small`The component comes from either the Oslo line or the Rome line'}\\)\n\\(\\lnot(o \\land r) = \\textsf{\\small`The component cannot come from both the Oslo and the Rome lines'}\\)\n$ o $\n\n\n\nData, assumptions, desired conclusions\nThe inspector knows for certain the following facts:\n\n\\(o \\lor r\\), \\(\\textsf{\\small`The component comes from either the Oslo line or the Rome line'}\\)\n\\(\\lnot(o \\land r)\\), \\(\\textsf{\\small`The component cannot come from both the Oslo and the Rome lines'}\\)\n\\(d\\), \\(\\textsf{\\small`The component is defective'}\\)\n\\(I\\), all remaining implicit information\n\nWe and them all together: \\[\nd \\land (o \\lor r) \\land \\lnot (o \\land r) \\land I \\ .\n\\]\nThe inspector knows, moreover, this hypothetical consequence:\n\n\\(\\lnot o \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} d \\land (o \\lor r) \\land \\lnot (o \\land r) \\land I\\), if the component is defective, it cannot come from the Oslo production line."
  },
  {
    "objectID": "truth_inference.html#background-information-and-conditional",
    "href": "truth_inference.html#background-information-and-conditional",
    "title": "6  Truth inference",
    "section": "6.4 Background information and conditional",
    "text": "6.4 Background information and conditional"
  },
  {
    "objectID": "truth_inference.html#truth-inference-rules-1",
    "href": "truth_inference.html#truth-inference-rules-1",
    "title": "6  Truth inference",
    "section": "6.5 Truth-inference rules",
    "text": "6.5 Truth-inference rules\nDeduction systems in formal logic give us a set of rules for making correct inferences, that is, for correctly determining whether the conclusions of interest are true or false. These rules are represented in a wide variety of ways, as steps leading from one conclusion to another one. The picture here on the margin, for instance, shows how a proof of our inference would look like, using the so-called sequent calculus.\n\n\n\n\n\nThe bottom formula is our conclusion; the formulae above it represent steps in the proof. Each line denotes the application of an inference rule. The two formulae with no line above are our two assumptions.\n\n\n\n\nWe can compactly encode all inference rules in the following way. First, represent true by the number 1, and false by 0. Second, symbolically write that conclusion \\(C\\) is true, given assumptions \\(A\\), as follows: \\[\n\\mathrm{T}(C \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} A) = 1 \\ .\n\\] or with 0 if it’s false.\nThe rules of truth inference are then encoded by the following equations, which must always hold for any sentences \\(A,B,C\\), no matter whether they are basic or complex:\n\n\n\nRule for “not”:\n\n\\[\\mathrm{T}(\\lnot A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} B)\n+ \\mathrm{T}(A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} B)\n= 1 \\tag{6.1}\\]\n\nRule for “and”:\n\n\\[\n\\mathrm{T}(A \\land B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n= \\mathrm{T}(A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} B \\land C) \\cdot\n\\mathrm{T}(B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n= \\mathrm{T}(B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} A \\land C) \\cdot\n\\mathrm{T}(A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n\\tag{6.2}\\]\n\nRule for “or”:\n\n\\[\\mathrm{T}(A \\lor B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n= \\mathrm{T}(A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C) +\n\\mathrm{T}(B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n- \\mathrm{T}(A \\land B \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} C)\n\\tag{6.3}\\]\n\nRule of self-consistency:\n\n\\[\\mathrm{T}(A \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} A \\land C)\n= 1\n\\tag{6.4}\\]\n\n\n\n\n\n\nLet’s see how the inference rule (?eq-example-rule), for example, is encoded in these equations. The rule starts with saying that \\(a \\land b\\) is true according to \\(D\\). This means that \\(\\mathrm{T}(a \\land b \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D)=1\\). But, by rule (6.2), we must then have \\(\\mathrm{T}(b \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} a \\land D) \\cdot \\mathrm{T}(a \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D) = 1\\). This can only happen if both \\(\\mathrm{T}(b \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} a \\land D)\\) and \\(\\mathrm{T}(a \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D)\\) are equal to \\(1\\). So we can conclude that \\(\\mathrm{T}(a \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D)=1\\), which is exactly the conclusion under the line in rule (?eq-example-rule).\n\n\n\n\n\n\n Exercise\n\n\n\nTry to prove our initial inference\n\\[\n\\frac{\n(b \\lor r) \\land \\lnot (b \\land r) \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D\n\\qquad\n\\lnot r \\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D\n}{\nb\\nonscript\\:\\vert\\nonscript\\:\\mathopen{} D\n}\n\\]\nusing the basic rules (6.1, 6.2, 6.3, 6.4). Remember that you can use each rule as many times as you like, and that there is not only one way of constructing a proof."
  },
  {
    "objectID": "truth_inference.html#logical-ai-agents-and-their-limitations",
    "href": "truth_inference.html#logical-ai-agents-and-their-limitations",
    "title": "6  Truth inference",
    "section": "6.6 Logical AI agents and their limitations",
    "text": "6.6 Logical AI agents and their limitations\nThe basic rules above are also the rules that a logical artificial-intelligent agent should follow.\n\n\n\n\n\n\n Reading\n\n\n\nCh. 7 in Artificial Intelligence\n\n\nMany – if not most – inference problems that a data engineer must face are, however, of the uncertain kind: it is not possible to surely infer the truth of some data, and the truth of some initial data may not be known either. In the next chapter we shall see how to generalize the logic rules to uncertain situations.\n\n\n\n\n\n\n For the extra curious\n\n\n\nOur cursory visit of formal logic only showed a microscopic part of this vast field. The study of logic rules continues still today, with many exciting developments and applications. Feel free take a look at Logic in Computer Science, Mathematical Logic for Computer Science, Natural Deduction Systems in Logic"
  }
]
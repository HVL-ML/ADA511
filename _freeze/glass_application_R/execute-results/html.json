{
  "hash": "a6bfd6e122dd63b3d4d7c6dea7ad14d6",
  "result": {
    "markdown": "::: {.hidden}\n<!-- $$\\require{mathtools}$$ -->\n\n\\providecommand{\\ul}{\\uline}\n\\providecommand{\\and}{\\mathbin{\\mkern-0mu,\\mkern-0mu}}\n\\renewcommand*{\\|}[1][]{\\nonscript\\:#1\\vert\\nonscript\\:\\mathopen{}}\n\\providecommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\renewcommand*{\\pr}[1]{\\textsf{\\small`#1'}}\n\\providecommand*{\\prq}[1]{\\textsf{\\small #1}}\n\\providecommand{\\se}[1]{\\mathsfit{#1}}\n\\renewcommand{\\se}[1]{\\mathsfit{#1}}\n\\providecommand{\\cat}[1]{\\texttt{\\small #1}}\n\\providecommand{\\vec}[1]{\\boldsymbol{#1}}\n\\providecommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\p}{\\mathrm{p}}\n\\renewcommand{\\P}{\\mathrm{P}}\n\\definecolor{quarto-callout-note-color}{HTML}{4477AA}\n\\definecolor{quarto-callout-note-color-frame}{HTML}{4477AA}\n\\definecolor{quarto-callout-important-color}{HTML}{AA3377}\n\\definecolor{quarto-callout-important-color-frame}{HTML}{AA3377}\n\\definecolor{quarto-callout-warning-color}{HTML}{EE6677}\n\\definecolor{quarto-callout-warning-color-frame}{HTML}{EE6677}\n\\definecolor{quarto-callout-tip-color}{HTML}{228833}\n\\definecolor{quarto-callout-tip-color-frame}{HTML}{228833}\n\\definecolor{quarto-callout-caution-color}{HTML}{CCBB44}\n\\definecolor{quarto-callout-caution-color-frame}{HTML}{CCBB44}\n\\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathrel{\\nonscript\\mkern-2.5mu#1\\nonscript\\mkern-2.5mu}}\n\\providecommand*{\\yX}{\\se{X}}\n\\providecommand*{\\yY}{\\se{Y}}\n\\providecommand*{\\yI}{\\se{I}}\n\\providecommand*{\\yi}[1][]{\\se{I}_{\\text{#1}}}\n\\providecommand{\\di}{\\mathrm{d}}\n\\providecommand{\\defd}{\\coloneqq}\n\\providecommand{\\blue}{\\color[RGB]{68,119,170}}\n\\providecommand{\\red}{\\color[RGB]{238,102,119}}\n\\providecommand{\\purple}{\\color[RGB]{170,51,119}}\n\\providecommand{\\green}{\\color[RGB]{34,136,51}}\n\\providecommand{\\yellow}{\\color[RGB]{204,187,68}}\n\\providecommand{\\lblue}{\\color[RGB]{102,204,238}}\n\\providecommand{\\grey}{\\color[RGB]{187,187,187}}\n\\providecommand{\\midgrey}{\\color[RGB]{119,119,119}}\n\\providecommand{\\black}{\\color[RGB]{0,0,0}}\n$$\n\\DeclarePairedDelimiters{\\set}{\\{}{\\}}\n$$\n\n<!-- \\renewcommand*{\\prq}[1]{\\textsf{\\small #1}} -->\n<!-- \\definecolor{lightblue}{HTML}{66CCEE} -->\n<!-- \\sethlcolor{lightblue} -->\n<!-- \\providecommand*{\\moo}[1][=]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n<!-- \\providecommand*{\\mo}[1][=]{\\mathrel{\\mkern-4mu#1\\mkern-4mu}} -->\n<!-- \\providecommand*{\\mo}[1][\\textrm{\\small=}]{\\mathord{\\mkern1.5mu#1\\mkern1.5mu}} -->\n\n:::\n\n::: {.hidden}\n\\providecommand*{\\yy}{\\cat{Y}}\n\\providecommand*{\\yn}{\\cat{N}}\n\\providecommand{\\vRI}{\\mathit{RI}}\n\\providecommand{\\vNa}{\\mathit{Na}}\n\\providecommand{\\vMg}{\\mathit{Mg}}\n\\providecommand{\\vAl}{\\mathit{Al}}\n\\providecommand{\\vSi}{\\mathit{Si}}\n\\providecommand{\\vK}{\\mathit{K}}\n\\providecommand{\\vCa}{\\mathit{Ca}}\n\\providecommand{\\vBa}{\\mathit{Ba}}\n\\providecommand{\\vFe}{\\mathit{Fe}}\n\\providecommand{\\vType}{\\mathit{Type}}\n\n:::\n\n\n\n# The universal exchangeable-inference machine in action\n\nConsider the following population, which we consider to be exchangeable:\n\n- [*Units*: glass fragments collected at particularly defined crime scenes.]{.small}\n\n- [*Variates*:]{.small}\n    + [$\\vRI$, ordinal, domain $\\set{1,\\dotsc,5}$: Refractive Index of the fragment]{.small}\n    + [$\\vNa$, ordinal, domain $\\set{1,\\dotsc,5}$: Natrium content of the fragment]{.small}\n    + [$\\vMg$, ordinal, domain $\\set{1,\\dotsc,5}$: Magnesium content of the fragment]{.small}\n    + [$\\vAl$, ordinal, domain $\\set{1,\\dotsc,5}$: Aluminium content of the fragment]{.small}\n    + [$\\vSi$, ordinal, domain $\\set{1,\\dotsc,5}$: Silicon content of the fragment]{.small}\n    + [$\\vK$, ordinal, domain $\\set{1,\\dotsc,5}$: Potassium content of the fragment]{.small}\n    + [$\\vCa$, ordinal, domain $\\set{1,\\dotsc,5}$: Calcium content of the fragment]{.small}\n    + [$\\vBa$, ordinal, domain $\\set{1,\\dotsc,5}$: Barium content of the fragment]{.small}\n    + [$\\vFe$, ordinal, domain $\\set{1,\\dotsc,5}$: Iron content of the fragment]{.small}\n\t+ [$\\vType$, nominal, domain $\\set{\\cat{T1},\\dots,\\cat{T7}}$: Type or origin of the glass fragment]{.small}\n\t\n\t[The values for the $\\vRI$ and content variates represent ranges of numeric values or percentages, which you can find in [this metadata file](datasets/glass_metadata-5_lev.csv). In the same file you also find the description of the glass types.]{.small}\n\nWe have a sample of 214 units from this population; their variate values are stored in [this data file](datasets/glass_data-5_lev.csv). Here are the first five:\n\n| $\\vRI$ | $\\vNa$ | $\\vMg$ | $\\vAl$ | $\\vSi$ | $\\vK$ | $\\vCa$ | $\\vBa$ | $\\vFe$ | $\\vType$ |\n|:------:|:------:|:------:|:------:|:------:|:-----:|:------:|:------:|:------:|:------:|\n| 2      | 2      | 5      | 3      | 3      | 1     | 2      | 1      | 1      |$\\cat{T2}$|\n| 2      | 2      | 4      | 3      | 3      | 1     | 2      | 1      | 1      |$\\cat{T2}$|\n| 3      | 3      | 5      | 2      | 2      | 1     | 2      | 1      | 1      |$\\cat{T1}$|\n| 2      | 3      | 2      | 3      | 3      | 1     | 2      | 2      | 1      |$\\cat{T4}$|\n| 2      | 2      | 4      | 2      | 3      | 1     | 2      | 1      | 1      |$\\cat{T1}$|\n: {.sm}\n\n\\\n\nNow we imagine to be an agent who wants to make inferences about the full population -- which also means fragments from *future* or *unsolved* crime scenes. The agent uses -- or is the embodiment of -- the universal exchangeable-inference machine.\n\n### Load the machine's apparatus\n\nWe load several `R` functions that implement the universal machine: they draw inferences, calculate marginal and conditional probabilities, and plot probability distributions:\n\n::: {.cell execution_count=1}\n``` {.r .cell-code}\nsource('code/universal_exch-inference_machine.R')\n```\n:::\n\n\n### The agent learns the background information\n\n\nOur agent at the moment doesn't know anything at all, not even about the existence of the population above. If we were to ask it anything, we would just get a blank stare back.\n\nLet us give it basic background information about the population: its variates and the variates' domains. We do this through the function `finfo()`: it has a `data` argument, which we omit for the moment, and a `metadata` argument. The latter can simply be the name of the file containing the metadata (NB: this file must have a specific format):\n\n::: {.cell execution_count=2}\n``` {.r .cell-code}\npriorinfo <- finfo(metadata='datasets/glass_metadata-5_lev.csv')\n```\n:::\n\n\nThe agent now possesses this basic background information, encoded in the `priorinfo` object. The encoding uses a particular mathematical representation which, however, is of no interest to us^[If you're curious you can have a glimpse at it with the command `str(priorinfo)`, which displays structural information about an object.]. Other representations could also be used, but the information would be the same. Think of this as encoding an image into a `png` or other lossless format: the representation of the image would be different, but the image would be the same.\n\n\n### The agent makes some preliminary inferences and predictions\n\nNow the agent knows about the population, variates, and domains. But it has not seen any data, that is, the variate values for some units. Yet we can ask it some questions and to draw some inferences. Remember that *the answer to a question* is not just a value: it *is the collection of all possible values, with a probability assigned to each*. If the actual value is known, then it will have probability `1`, and all others probability `0`.\n\nLet's ask the agent: what is the marginal frequency distribution for the variate $\\vType$, in the *full* (infinite!) population? Obviously the agent doesn't know what the actual distribution is, nor do we. It will calculate a probability distribution over all possible marginal frequency distributions.\n\nThis probability distribution for the $\\vType$ variate is calculated by the function `fmarginal()`. It has arguments `finfo`: the agent's information; and `variates`: the names of the variates of which we want the marginal frequencies:\n\n::: {.cell execution_count=3}\n``` {.r .cell-code}\npriorinfo_type <- fmarginal(finfo=priorinfo, variates='Type')\n```\n:::\n\n\nThe answer is stored in the object `priorinfo_type`, which now contains only information pertinent to the $\\vType$ variate.\n\nWe would like to visualize this probability distribution over marginal frequency distributions. A complication is that we would need infinite dimensions to visualize this faithfully. One approximate way to represent this probability distribution is by showing, say, 100 representative samples from it. The idea is the same as for a scatter plot ([§ @sec-represent-probs]). In this case we would then have 100 different frequency distributions for the variate $\\vType$.\n\nThe function `plotsamples1D()` does this kind of visual representation. It has arguments `finfo`: the object encoding the probability distribution; `n` (default 100): the number of samples to show; and `predict`, which for the moment we set to `FALSE` and discuss in a moment.\n\nHow do you think this probability distribution will look like? what kind of marginal frequencies we do expect in the full population?\n\n::: {.cell execution_count=4}\n``` {.r .cell-code}\nplotsamples1D(finfo=priorinfo_type, n=100, predict=FALSE)\n```\n\n::: {.cell-output .cell-output-display}\n![](glass_application_R_files/figure-html/cell-5-output-1.png){}\n:::\n:::\n\n\nYou see that anything goes: Some frequency distributions give frequency almost `1` to a specific value, and almost `0` to the others. Other frequency distributions spread out the frequencies more evenly, with some peaks here or there.\n\nThis is a meaningful answer, because the agent hasn't seen any data. From its point of view, everything is possible in this population.\n\n",
    "supporting": [
      "glass_application_R_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
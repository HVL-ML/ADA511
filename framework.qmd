# Framework
{{< include _macros.qmd >}}


Every data-driven engineering problem is unique. But there are also similarities among all engineering problems. We shall now learn a framework that allow us to frame and face any data-driven engineering problem, and any sub-problems into which a problem can be broken down. This framework is build on some notions that help us analyse the problem, and on a set of principles. This set of principles is important because it mathematically guarantees an optimal solution to the problem -- within the goals, means, and data into which we framed the problem.

## Decision Theory

There is always a goal underlying any engineering problem. The problem itself is how to reach that goal. Typically there are several possible courses of actions available; the question is which one to choose. Choice of a specific action will lead to some consequences, which could be the goal we want to reach, but could also be something else, possibly undesirable. The decision upon a specific action is often difficult because its consequences are not known with certainty. This uncertainty comes in turn from a more general uncertainty about the whole context of the problem: unknown past or present details, unknown future events and responses, and so on. 

@@ example

This is what we call a **decision problem**.

A specific course of action may in turn be realized in several ways that are equivalent in regard to the outcome, but inequivalent in regard to costs, time, resources. We thus face a decision within a decision. In general, a decision problem may involve several decision sub-problems, in turn involving sub-sub-problems, and so on.

The main engineering goal itself could be to design and build an automated device that chooses an optimal course of action in a specific kind of uncertain situation. Think for instance of an aeronautic engineer who is designing an autopilot system.

Therefore, to analyse and tackle this kind of problems we would like to have a framework with the following features: it should take into consideration choices, consequences, costs and gains, and uncertainties; it should be susceptible to recursive application if needed; and it should be suited to being used not only for human engineers, but also for automated or artificial-intelligence devices.

Such a framework does exist: it is called [**Decision Theory**]{.text-warning}.

Decision theory has a long history, going back to Leibniz in the 1600s and partly even to Aristotle in the &minus;300s, and appearing in its present form around 1920--1960. What's remarkable about it is that it is not only *a* framework, but *the* framework we must use. A logico-mathematical theorem shows that any framework that does not break basic optimality and rationality criteria has to be equivalent to Decision Theory (in other words, it can use different technical terminology and rewrite mathematical operations in a different way, but it boils down to the same notions and operations of Decision Theory). So if you wanted to invent and use another framework, then either (a) it would lead to some irrational or illogical consequences, or (b) it would lead to results identical to Decision Theory's. Many frameworks that you are probably familiar with, such as optimization theory, are just specific applications or particular cases of Decision Theory.

Decision theory consists of two main theories:  [**Probability Theory**]{.text-warning}, which deals with data, information, uncertainty, inference; and  [**Utility Theory**]{.text-warning}, which deals with actions, consequences, gain and loss, decisions.

We shall get acquainted with Decision Theory step by step, introducing its main ideas and notions as they become necessary. Let us start with the first building blocks.


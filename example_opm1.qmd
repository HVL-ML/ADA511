# [Example application: adult-income task]{.red} {#sec-code-workflow}
{{< include macros.qmd >}}
{{< include macros_exchangeability.qmd >}}
{{< include macros_opm.qmd >}}

```{r}
#| echo: false
options(repr.plot.width=6*sqrt(2), repr.plot.height=6)
knitr::opts_knit$set(root.dir = "code/OPM-nominal/")
```

Let's illustrate the example workflow described in [§ @sec-opm-workflow] with a toy, but not too simplistic, example, based on the [adult-income dataset](https://archive.ics.uci.edu/dataset/2/adult).

We start loading the R libraries and functions needed at several stages. Make sure you are in a directory homologous to `code/OPM-nominal/`:

```{r}
library('data.table')
library('foreach')
library('png')
source('../tplotfunctions.R')
source('guessmetadata.R')
source('buildagent.R')
source('infer.R')
source('decide.R')
source('rF.R')
source('plotFsamples1D.R')
```


## Define the task

The main task is to infer whether a USA citizen earns less (≤) or more (>) than USD 50 000/year, given a set of characteristics of that citizen. In view of later workflow stages, let's note a couple of known and unknown facts to delimit this task in a more precise manner:

- Given the flexibility of the agent we shall use, we can generalize the task: to infer any subset of the set of characteristics, given any other subset. In other words, we can choose the predictand and predictor variates for any new citizen. Later on we shall also extend the task to making a concrete decision, based on utilities relevant to that citizen.
    
	This flexibility is also convenient because no explanation is given as to *what purpose* the income should be guessed.

- The training data come from a 1994 census, and our agent will use an exchangeable belief distribution about the population. The value of the USD and the economic situation of the country changes from year to year, as  well as the informational relationships between economic and demographic factors. For this reason the agent should be used to draw inferences about at most one or two years around 1994. Beyond such time range the exchangeability assumption is too dubious and risky.

- The [USA population in 1994 was around 260 000 000](https://www.macrotrends.net/countries/USA/united-states/population), and we shall use around 11 000 training data. The population size can therefore be considered approximately infinite.

## Collect & prepare background info

### Variates and domains

The variates to be used must be of nominal type, because our agent's background beliefs (represented by the Dirichlet-mixture distribution) are only appropriate for nominal variates. In this toy example we simply discard all original non-nominal variates. These included some, such as age, that would surely be relevant for this task. As a different approach, we could have coarsened each non-nominal variate into three or four range values, so that treating it as nominal would have been an acceptable approximation.

First, create a preliminary metadata file by running the function `guessmetadata()` on the training data [`train-income_data_example.csv`](https://github.com/pglpm/ADA511/blob/master/code/OPM-nominal/train-income_data_example.csv):

```{r}
guessmetadata(data='train-income_data_example.csv', file='preliminary.csv')
```

Inspect the resulting file `preliminary.csv` and check whether you can alter it to add additional background information.

As an example, note that domain of the $\mathit{native\_country}$ variate does not include $\cat{Norway}$ or $\cat{Netherlands}$. Yet it's extremely likely that there were some native Norwegian or Dutch USA citizens in 1994; maybe too few to have been sampled into the training data. Let's add these two values to the list of domain values, and increase the domain size of $\mathit{native\_country}$ from 40 to 42. The resulting, updated metadata file has already been saved as [`meta_income_data_example.csv`](https://github.com/pglpm/ADA511/blob/master/code/OPM-nominal/meta_income_data_example.csv).

### Agent's parameters $\amin, \amax$

What could be the representative-sample size for the variates above, in the USA 1994 population? Let's put an upper bound at around 1 000 000 (that's roughly 0.5% of the whole population) with $\amax=20$, and a lower bound at 1 with $\amin=0$; these are the default values. We shall see later what the agent suggests might be a reasonable representative-sample size.

## Collect & prepare training data

The 11 306 training data have been prepared by including only nominal variates, and discarding datapoints with partially missing data (although the function `buildagent()` discards such incomplete datapoints automatically). The resulting file is [`test-income_data_example.csv`](https://github.com/pglpm/ADA511/blob/master/code/OPM-nominal/test-income_data_example.csv).

## Prepare OPM agent

For the sake of this example we shall prepare two agents with the same background information:

- `opm10`, trained with 10 training datapoints
- `opmall`, trained with all 11 306 training datapoints

Prepare and train each with the `buildagent()` function:

```{r}
opm10 <- buildagent(metadata='meta_income_data_example.csv', data=fread('train-income_data_example.csv', header=TRUE)[1:10])

opmall <- buildagent(metadata='meta_income_data_example.csv', data='train-income_data_example.csv')
```

We can peek into the internal structure of these "agent objects" with `str()`

```{r}
str(opmall)
```

\

The agent has internally guessed the representative-sample size. We can peek at its guess by plotting its `alphas` parameters against the `palphas` ones:

```{r}
tplot(x=opmall$alphas, y=opmall$palphas, type='b',
      xlim=c(0, 10000), ylim=c(0, NA),
      xlab='representative-sample size', ylab='probability')
```

The most probable representative-sample size seems to be of the order of magnitude of 2000 units.

## Application

### Preliminary test: predictands

Our two agents are ready to be applied to new instances.

Before applying them, let's check some of their inferences, and see if we find anything unconvincing about them. If we find something unconvincing, it means that the background information we provided to the agent doesn't match the one in our intuition. Then there are two or three possibilities: our intuition is misleading us and need correcting; or we need to go back to stage [*Collect & prepare background info*]{.blue} and correct the background information given to the agent; or a combination of these two possibilities.

We ask the `opm10` agent to forecast the $\mathit{income}$ of the next unit, using the `infer()` function:

```{r}
infer(agent=opm10, predictand='income')
```

The agent gives a very slightly larger probability to the $\cat{<=50K}$ case. Using the function `plotFsamples1D()` we can also inspect `opm10`-agent's belief about the frequency distribution of $\mathit{income}$ for the full population. This belief is represented by a generalized scatter plot of 200 representative frequency distributions:

```{r}
plotFsamples1D(agent=opm10, n=200, predictand='income',
               ylim=c(0,1), main='opm10')
```

where the [blue line]{.blue} is the distribution previously calculated with the `infer()` function.

This plot expresses the `opm10`-agent's belief that future training data might lead to even higher probabilities for $\cat{<=50K}$. This is corroborated by the `opmall`-agent, trained with the full training dataset:

```{r}
plotFsamples1D(agent=opmall, n=200, predictand='income',
               ylim=c(0,1), main='opmall')
```

The probability that the next unit has $\mathit{income}\mo\cat{<=50}$ is now above 70%. Also note that the `opmall`-agent doesn't believe that this probability would change appreciably if more training data were provided.

\

We can perform a similar exploration for any other variate. Let's take the $\mathit{race}$ variate:


```{r}
plotFsamples1D(agent=opm10, n=200, predictand='race',
               ylim=c(0,1), main='opm10', cex.axis=0.75)
```

Note again how the little-trained `opm10`-agent has practically uniform beliefs. But it's also expressing the fact that future training data will probably increase the probability of $\mathit{race}\mo\cat{White}$. This is again corroborated by the fully-trained agent:


```{r}
plotFsamples1D(agent=opmall, n=200, predictand='race',
               ylim=c(0,1), main='opmall', cex.axis=0.75)
```

\

These checks are satisfying, but it's good to check their agreement or disagreement with our intuition. Examine for instance the last two plots. The `opm10`-agent is not giving a high probability (less than 1/200) to the possibility that future training data will lead to probabilities for $\mathit{race}\mo\cat{White}$ above 70%, which is what we are observing with the `opmall`-agent instead. Would you like our agent to be more "open-minded" about future training data? In that case you should go back to the [*Collect & prepare background info*]{.blue} stage, and for example modify the parameters $\amin, \amax$, then re-check. Or you could even try an agent with a different initial belief distribution.

In making this kind of considerations it's important to keep in mind what we learned and observed in previous chapters:

:::{.callout-note}
## Our goal: optimality, not "success"

Remember (§§ [-@sec-optimality] and [-@sec-probability-def]) that a probability represents the *rational* degree of belief that an agent should have *given the particular information available*. We can't judge a probability from the value it assigns to something we later learn to be true -- because according to the information available it could be more rational (and optimal) to consider that something implausible (recall the example in [§ @sec-probability-def] of an object falling from the sky as we cross the street).

From this point of view we should be wary of comparing the probability of something with our a-posteriori knowledge about it.
:::

### Preliminary test: specifying predictors

Let's continue with one more check, specifying some predictors.

We ask the `opm10` agent to forecast the $\mathit{income}$ of a new unit, given that the unit is known to have $\mathit{occupation}\mo\cat{Exec-managerial}$ and $\mathit{sex}\mo\cat{Male}$ (two predictor variates). What would you expect?

The `opm10`-agent's belief about the unit -- as well as about the *full subpopulation* ([§ @sec-subpopulations]) of units having those predictors -- is shown in the following plot:

```{r}
plotFsamples1D(agent=opm10, n=200,
               predictand='income',
               predictor=list(occupation='Exec-managerial', sex='Male'),
               ylim=c(0,1), main='opm10')
```

Note how the `opm10`-agent still slightly higher probability to $\mathit{income}\mo\cat{<=50}$, but at the same time it is quite uncertain about the subpopulation frequencies; more than if the predictor had not been specified. That is, according to this little-trained agent there could be large variety of possibilities *within this specific subpopulation*.

The `opmall`-agent's beliefs are shown below:

```{r}
plotFsamples1D(agent=opmall, n=200,
               predictand='income',
               predictor=list(occupation='Exec-managerial', sex='Male'),
               ylim=c(0,1), main='opmall')
```

it believes with around 55% probability that such a unit would have higher, $\cat{>50K}$ income. The representative subpopulation-frequency distributions in grey indicate that this belief is unlikely to be changed by new training data.

\

Let's now see an example of our agent's versatility by switching predictands and predictors. We tell the `opmall`-agent that the new unit has $\mathit{income}\mo\cat{>50}$, and ask it to infer the joint variate $(\mathit{occupation} \and \mathit{sex})$; let's present the results in rounded percentages:

```{r}
result <- infer(agent=opmall, predictand=c('occupation', 'sex'),
                predictor=list(income='>50K'))
round(result * 100)
```

It returns a 14 × 2 table of joint probabilities. The most probable combinations are $(\cat{Exec-managerial}, \cat{Male})$ and $(\cat{Prof-specialty}, \cat{Male})$.

Also in this case we could ask the agent how much these probabilities could change if new training data were provided. We can get an idea by drawing 1000 samples of subpopulation frequencies with the function `rF()`, and then calculating their standard deviation with `sd()`:

```{r}
variability <- apply(
    rF(n=1000, agent=opmall,
       predictand=c('occupation', 'sex'), predictor=list(income='>50K')),
    c('occupation','sex'), sd)
print('Possible variation (sd) with new training data:')
round(variability * 100, 1) # round to one decimal
```

the agent believes (at around 68%) that the current probability wouldn't change more than around ±0.5%.


\

The inferences above were meant as checks, but we see that we can actually ask our agent a wide variety of questions about the full population, and do all sorts of association studies.


:::{.callout-warning}
## {{< fa exclamation-triangle >}} No "test" or "validation" datasets used or needed

The tests and explorations above were done without any "validation" or "test" datasets. This is because our agent is capable of calculating and showing its beliefs about the *full population* -- and therefore about future data.

The need for validation or test datasets with common machine-learning algorithms arise from the fact that full-population beliefs are hidden or, more commonly, not computed at all, in order to gain speed. The application of the trained machine-learning algorithm to a validation dataset is an approximate way of extracting such beliefs.

:::


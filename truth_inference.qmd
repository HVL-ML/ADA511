# Truth inference {#sec-truth-inference}
{{< include _macros.qmd >}}

## Building blocks

Consider the following trivial problem. An inspector examines an electronic component out of a production line. The information available to the inspector is the following:

- The component can either come from the production line in Oslo, or from the one in Rome. 

- If the component is defective, it cannot come from Oslo. 

- The component is found to be defective.

The question is: from which production line does the component come from?

The answer is obvious: from the Rome line. But how could we draw this obvious and sure inference? Which rules did we follow? Did we make any hidden assumptions, or use information that wasn't explicitly mentioned?

Logic is the huge field that formalizes and makes rigorous the rules that a rational person or an artificial intelligence should use in drawing sure inferences. We'll get a glimpse of it here, as a trampoline for jumping towards the more general inferences that we need in data-driven engineering problems.

### Analysis of the problem

Let's write down the basic sentences that constitute our data and the inferences we want to draw. We identify three basic sentences, which we can represent by these symbols:

- $o \coloneqq \pr{The component comes from the Oslo line}$

- $r \coloneqq \pr{The component comes from the Rome line}$

- $d \coloneqq \pr{The component is defective}$

Obviously the inspector possesses even more information which is implicitly understood. It's clear, for instance, that the component cannot come from both Oslo and Rome. Let's denote this information with

- $I \coloneqq{}$(a long collection of sentences explaining all other implicitly understood information).
\

With the sentences above we can express more complex details and hypotheses appearing in the inspector's problem, in particular:

- $o \lor r = \pr{The component comes from either the Oslo line or the Rome line}$

- $\lnot(o \land r) = \pr{The component cannot come from both the Oslo and the Rome lines}$

- $ \lnot o \coloneqq \pr{The component does not come from the Oslo line}$

### Data, assumptions, desired conclusions

The inspector knows for certain the following facts:

- $o \lor r$, $\pr{The component comes from either the Oslo line or the Rome line}$

- $\lnot(o \land r)$, $\pr{The component cannot come from both the Oslo and the Rome lines}$

- $d$, $\pr{The component is defective}$

- $I$, all remaining implicit information

We `and` them all together:
$$
d \land (o \lor r) \land \lnot (o \land r) \land I \ .
$$

The inspector knows, moreover, this hypothetical consequence:

- $\lnot o \| d \land (o \lor r) \land \lnot (o \land r) \land I$, if the component is defective, it cannot come from the Oslo production line.

- 



## Background information and conditional

<!-- From this last remark we see that the sentence $\pr{The umbrella is either blue or red}$ does not really correspond to $b \lor r$, because the latter formula includes the possibility that the umbrella could be *both* fully blue *and* fully red. But we are implicitly assuming that this cannot happen; it's physically impossible. We have thus discovered that there is another piece of data hidden in our inference: the umbrella cannot be both blue and red. Convince yourself that we can write such hidden data like this: -->
<!-- $$ -->
<!-- \lnot(b \land r) = \pr{The umbrella cannot be both blue and red}\ . -->
<!-- $$ -->
<!-- \ -->

\



## Truth-inference rules

Deduction systems in formal logic give us a set of rules for making correct inferences, that is, for correctly determining whether the conclusions of interest are true or false. These rules are represented in a [wide variety of ways](https://plato.stanford.edu/archives/spr2023/entries/natural-deduction), as steps leading from one conclusion to another one. The picture here on the margin, for instance, shows how a proof of our inference would look like, using the so-called sequent calculus.

:::{.column-margin}
![The bottom formula is our conclusion; the formulae above it represent steps in the proof. Each line denotes the application of an inference rule. The two formulae with no line above are our two assumptions.](umbrella_inference_sequent.png){width=100%}
:::
\

We can compactly encode all inference rules in the following way. First, represent `true` by the number `1`, and `false` by `0`. Second, symbolically write that conclusion $C$ is `true`, given assumptions $A$, as follows:
$$
\mathrm{T}(C \| A) = 1 \ .
$$
or with `0` if it's `false`.

The rules of truth inference are then encoded by the following equations, which must always hold for any sentences $A,B,C$, no matter whether they are basic or complex:

:::: {.column-page-inset-right style="color:#228833"}
::: {.border}
Rule for "not":
: $$\mathrm{T}(\lnot A \| B) 
+ \mathrm{T}(A \| B)
= 1$$ {#eq-t-not}

Rule for "and":
: $$
\mathrm{T}(A \land B \| C) 
= \mathrm{T}(A \| B \land C) \cdot
\mathrm{T}(B \| C) 
= \mathrm{T}(B \| A \land C) \cdot
\mathrm{T}(A \| C)
$$ {#eq-t-and}

Rule for "or":
: $$\mathrm{T}(A \lor B \| C) 
= \mathrm{T}(A \| C) +
\mathrm{T}(B \| C) 
- \mathrm{T}(A \land B \| C)
$$ {#eq-t-or}

Rule of self-consistency:
: $$\mathrm{T}(A \| A \land C) 
= 1
$$ {#eq-t-unity}
:::
::::

\

Let's see how the inference rule (@eq-example-rule), for example, is encoded in these equations. The rule starts with saying that $a \land b$ is `true` according to $D$. This means that $\mathrm{T}(a \land b \| D)=1$. But, by rule (@eq-t-and), we must then have $\mathrm{T}(b \| a \land D) \cdot
\mathrm{T}(a \| D) = 1$. This can only happen if both $\mathrm{T}(b \| a \land D)$ and $\mathrm{T}(a \| D)$ are equal to $1$. So we can conclude that $\mathrm{T}(a \| D)=1$, which is exactly the conclusion under the line in rule (@eq-example-rule).

::: {.callout-caution icon=false}
## {{< fa pen >}} Exercise
Try to prove our initial inference

$$
\frac{
(b \lor r) \land \lnot (b \land r) \| D
\qquad
\lnot r \| D
}{
b\| D
}
$$

using the basic rules (@eq-t-not, @eq-t-and, @eq-t-or, @eq-t-unity). Remember that you can use each rule as many times as you like, and that there is not only one way of constructing a proof.
:::


## Logical AI agents and their limitations

The basic rules above are also the rules that a logical artificial-intelligent agent should follow. 

::: {.callout-caution}
## {{< fa book-open >}} Reading
[Ch.Â 7 in *Artificial Intelligence*](https://hvl.instructure.com/courses/25074/modules/items/660089)
:::

Many -- if not most -- inference problems that a data engineer must face are, however, of the *uncertain* kind: it is not possible to surely infer the truth of some data, and the truth of some initial data may not be known either. In the next chapter we shall see how to generalize the logic rules to uncertain situations.



::: {.callout-tip}
## {{< fa rocket >}} For the extra curious
Our cursory visit of formal logic only showed a microscopic part of this vast field. The study of logic rules continues still today, with many exciting developments and applications. Feel free take a look at [*Logic in Computer Science*](https://hvl.instructure.com/courses/25074/modules/items/661036), [*Mathematical Logic for Computer Science*](https://hvl.instructure.com/courses/25074/modules/items/661146), [Natural Deduction Systems in Logic](https://plato.stanford.edu/archives/spr2023/entries/natural-deduction)
:::
